// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Board {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name     String
  image   Image[]
  visibility Visibility @default(PUBLIC)
  description String
  user      String @map("userId") 
  userId    User @relation(fields: [user], references: [id])
  Lists   List[]
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileUrl     String
  fileKey     String
  boardId   String @map("boardId") @db.ObjectId
  board     Board @relation(fields: [boardId], references: [id])
}

model List {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name     String
  boardId   String @map("boardId") @db.ObjectId
  cards     Card[]
  board     Board @relation(fields: [boardId], references: [id])
}

model Card {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image  String?
  name     String
  description String
  listId   String @map("listId") @db.ObjectId
  list     List @relation(fields: [listId], references: [id])
  comments   Comments[]
  labels     Label[]
  userId     String @map("userId")
  user     User @relation(fields: [userId], references: [id])
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text     String
  cardId   String @map("cardId") @db.ObjectId
  card     Card @relation(fields: [cardId], references: [id])
  userId     String @map("userId")
  user     User @relation(fields: [userId], references: [id])
}

model User {
  id        String  @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  email     String 
  isAdmin Boolean @default(false)
  image  String
  name     String
  boards   Board[]
  cards    Card[]
  comments Comments[]
}

model Label {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name     String
  color    String
  cardId   String @map("cardId") @db.ObjectId
  card     Card @relation(fields: [cardId], references: [id])
  
}